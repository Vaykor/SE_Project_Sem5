// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TravelPlaner.Model.Classes.Context;

#nullable disable

namespace TravelPlaner.Migrations
{
    [DbContext(typeof(TravelPlannerContext))]
    partial class TravelPlannerContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TravelPlaner.Model.Classes.Database.Destination", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TripSegmentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TripSegmentId");

                    b.ToTable("Destination");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Destination");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("TravelPlaner.Model.Classes.Database.Expense", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TripSegmentId")
                        .HasColumnType("int");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("TripSegmentId");

                    b.ToTable("Expenses");
                });

            modelBuilder.Entity("TravelPlaner.Model.Classes.Database.Trip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Trips");
                });

            modelBuilder.Entity("TravelPlaner.Model.Classes.Database.TripMemory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SongURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TripSegmentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TripSegmentId");

                    b.ToTable("TripMemory");
                });

            modelBuilder.Entity("TravelPlaner.Model.Classes.Database.TripSegment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TripId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TripId");

                    b.ToTable("TripSegment");
                });

            modelBuilder.Entity("TravelPlaner.Model.Classes.Database.Landmark", b =>
                {
                    b.HasBaseType("TravelPlaner.Model.Classes.Database.Destination");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Landmark");
                });

            modelBuilder.Entity("TravelPlaner.Model.Classes.Database.RestingPoint", b =>
                {
                    b.HasBaseType("TravelPlaner.Model.Classes.Database.Destination");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactInfo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NightsSpentThere")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.ToTable("Destination", t =>
                        {
                            t.Property("Address")
                                .HasColumnName("RestingPoint_Address");

                            t.Property("Name")
                                .HasColumnName("RestingPoint_Name");
                        });

                    b.HasDiscriminator().HasValue("RestingPoint");
                });

            modelBuilder.Entity("TravelPlaner.Model.Classes.Database.Destination", b =>
                {
                    b.HasOne("TravelPlaner.Model.Classes.Database.TripSegment", "TripSegment")
                        .WithMany("Destinations")
                        .HasForeignKey("TripSegmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TripSegment");
                });

            modelBuilder.Entity("TravelPlaner.Model.Classes.Database.Expense", b =>
                {
                    b.HasOne("TravelPlaner.Model.Classes.Database.TripSegment", "TripSegment")
                        .WithMany("Expenses")
                        .HasForeignKey("TripSegmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TripSegment");
                });

            modelBuilder.Entity("TravelPlaner.Model.Classes.Database.TripMemory", b =>
                {
                    b.HasOne("TravelPlaner.Model.Classes.Database.TripSegment", "TripSegment")
                        .WithMany("Memories")
                        .HasForeignKey("TripSegmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TripSegment");
                });

            modelBuilder.Entity("TravelPlaner.Model.Classes.Database.TripSegment", b =>
                {
                    b.HasOne("TravelPlaner.Model.Classes.Database.Trip", "Trip")
                        .WithMany("TripSegments")
                        .HasForeignKey("TripId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Trip");
                });

            modelBuilder.Entity("TravelPlaner.Model.Classes.Database.Trip", b =>
                {
                    b.Navigation("TripSegments");
                });

            modelBuilder.Entity("TravelPlaner.Model.Classes.Database.TripSegment", b =>
                {
                    b.Navigation("Destinations");

                    b.Navigation("Expenses");

                    b.Navigation("Memories");
                });
#pragma warning restore 612, 618
        }
    }
}
